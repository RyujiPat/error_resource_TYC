// Magic-state scheme on 7-qubit CCZ gate

// Definitions
// P0(q) -- preparing qubit q in |0>
// Pp(q) -- preparing qubit q in |+>
// Id(q) -- identity gate on qubit q
// H(q)  -- Hadamard on qubit q
// S(q)  -- Phase gate on qubit q
// K(q)  -- S.H gate (H followed by S) on qubit q
// Sinv(q) -- inverse S gate on qubit q
// Kinv(q) -- inverse K gate on qubit q
// CX(p,q) -- CNOT from qubit p to q
// CZ(p,q) -- controlled-Z between qubits p and q
// CCZ(p,q,r) -- controlled-controlled-Z between qubits p, q, and r
// MeasZ(q) -- measures qubit q in the Z-basis
// MeasX(q) -- measures qubit q in the X-basis
// A(qi-qf) Ð single-qubit gate A applied transversally on qubits qi,qi+1,...,qf
// B(pi-pf,qi-qf) Ð two-qubit gate B applied transversally from qubit pi to qi, from pi+1 to qi+1,...,from pf to qi 
// C(pi-pf,qi-pf,ri-rf) Ð three-qubit gate C applied transversally between qubit pi, qi, and ri, between pi+1, qi+1, and ri+1,...,between pf, qf, and rf.

// Circuits are broken into timesteps by newlines - a qubit should only be
//  involved in at most 1 gate per timestep
// Circuits are organized into subcircuits by "def". Subcircuits take sets of
//  input and output qubits as arguments. Input qubits are never prepared
//  within the subcircuit, and output qubits are never measured.


// Fault-tolerantly prepares a logical |+> state in the 7-qubit code a la Goto
def LogicalPlus(in=(), out=(1,2,3,4,5,6,7)):
  
  Pp(1)
  P0(2)
  P0(3)
  P0(4)
  Pp(6)
  Pp(7)
  
  CX(1,2)
  CX(7,3)
  CX(6,4)
  Pp(5)

  CX(1,3)
  CX(5,2)
  CX(7,4)
  Id(6)
  Pp(8)
  
  CX(8,1)
  CX(6,2)
  Id(3)
  Id(4)
  CX(5,7)
  
  Id(1-5)
  CX(8,6)
  Id(7)

  Id(1-6)
  CX(8,7)
  
  Id(1-7)
  MeasX(8)


// Fault-tolerantly prepares a logical |0> state in the 7-qubit code a la Goto
def LogicalZero(in=(), out=(1,2,3,4,5,6,7)):
  
  P0(1)
  Pp(2)
  Pp(3)
  Pp(4)
  P0(6)
  P0(7)
  
  CX(2,1)
  CX(3,7)
  CX(4,6)
  P0(5)

  CX(3,1)
  CX(2,5)
  CX(4,7)
  Id(6)
  P0(8)
  
  CX(1,8)
  CX(2,6)
  Id(3)
  Id(4)
  CX(7,5)
  
  Id(1-5)
  CX(6,8)
  Id(7)

  Id(1-6)
  CX(7,8)
  
  Id(1-7)
  MeasZ(8)

// Alternative fault-tolerant preparation of a logical |+> state in the 7-qubit Bacon-Shor code
def LogicalZero(in=(), out=(1,2,3,4,5,6,7)):
  
  P0(1)
  P0(2)
  Pp(3)
  P0(4)
  Pp(6)
  Pp(7)
  P0(8)
  P0(9)
  Pp(10)
  P0(11)
  Pp(13)
  Pp(14)
  
  CX(3,1)
  CX(7,2)
  CX(6,4)
  Pp(5)
  CX(10,8)
  CX(14,9)
  CX(13,11)
  Pp(12)

  CX(5,1)
  CX(6,2)
  CX(7,4)
  Id(3)
  CX(12,8)
  CX(13,9)
  CX(14,11)
  Id(10)

  CX(7,1)
  CX(3,2)
  CX(5,4)
  Id(6)
  CX(14,8)
  CX(10,9)
  CX(12,11)
  Id(13)
  
  CX(8-14,1-7)
  
  Id(1-7)
  MeasX(8-14)

// Alternative fault-tolerant preparation of a logical |0> state in the 7-qubit Bacon-Shor code
def LogicalZero(in=(), out=(1,2,3,4,5,6,7)):
  
  Pp(1)
  Pp(2)
  P0(3)
  Pp(4)
  P0(6)
  P0(7)
  Pp(8)
  Pp(9)
  P0(10)
  Pp(11)
  P0(13)
  P0(14)
  
  CX(1,3)
  CX(2,7)
  CX(4,6)
  P0(5)
  CX(8,10)
  CX(9,14)
  CX(11,13)
  P0(12)

  CX(1,5)
  CX(2,6)
  CX(4,7)
  Id(3)
  CX(8,12)
  CX(9,13)
  CX(11,14)
  Id(10)

  CX(1,7)
  CX(2,3)
  CX(4,5)
  Id(6)
  CX(8,14)
  CX(9,10)
  CX(11,12)
  Id(13)
  
  CX(1-7,8-14)
  
  Id(1-7)
  MeasZ(8-14)

// Fault-tolerantly prepares a 7-CAT state
def 7CAT(in=(), out=(1,2,3,4,5,6,7)):
  
  P0(4)
  Pp(5)

  P0(3)
  CX(5,4)
  P0(6)

  P0(2)
  CX(4,3)
  CX(5,6)
  P0(7)

  P0(1)
  CX(3,2)
  Id(4)
  Id(5)
  CX(6,7)
  P0(8)
  
  CX(2,1)
  Id(3-6)
  CX(7,8)

  CX(1,8)
  Id(2-7)

  Id(1-7)
  MeasZ(8)


// Implements Steane error-correction on the 7-qubit code
def ErrorCorrection (in=out=(1,2,3,4,5,6,7)):

  LogicalZero(in=(), out=(8,9,10,11,12,13,14))
  LogicalPlus(in=(), out=(15,16,17,18,19,20,21))

  CX(1-7,15-21)
 
  CX(8-14,1-7)
  MeasZ(15-21)

  Id(1-7)
  MeasX(8-14)


// Implements Steane error-correction on the 7-qubit code. Recovery is postponed by classical postprocessing. 
def ErrorCorrectionPost (in=out=(1,2,3,4,5,6,7)):

  LogicalZero(in=(), out=(8,9,10,11,12,13,14))
  LogicalPlus(in=(), out=(15,16,17,18,19,20,21))

  CX(1-7,15-21)
 
  CX(8-14,1-7)
  MeasZ(15-21)

  MeasX(8-14)


// Fault-tolerantly prepares a CCZ state
def CCZState(in=(), out=(1,2,...,21)):

  LogicalZero(in=(), out=(1,2,3,4,5,6,7))
  LogicalPlus(in=(), out=(8,9,10,11,12,13,14))
  LogicalPlus(in=(), out=(15,16,17,18,19,20,21))
  7CAT(in=(), out=(22,23,24,25,26,27,28))
  7CAT(in=(), out=(29,30,31,32,33,34,35))

  CX(22-28,1-7)
 
  CCZ(22-28,8-14,15-21)

  MeasX(22-28)

  ErrorCorrection(in=out=(1,2,3,4,5,6,7))
  ErrorCorrection(in=out=(8,9,10,11,12,13,14))
  ErrorCorrection(in=out=(15,16,17,18,19,20,21))

  CX(29-35,1-7)
  Id(8-21)
 
  CCZ(29-35,8-14,15-21)
  Id(1-7)

  MeasX(29-35)

// The circuit for logical CCZ by teleportation(without classically controlled gates)
def FaultTolerantCCZ(in=(22,23,...,42), out=(1,2,...,21)):

  CCZState(in=(), out=(1,2,...,21))
  ErrorCorrectionPost(in=out=(22,23,24,25,26,27,28))
  ErrorCorrectionPost(in=out=(29,30,31,32,33,34,35))
  ErrorCorrectionPost(in=out=(15,16,17,18,19,20,21))

  CX(1-7,22-28)
  CX(8-14,29-35)
  CX(15-21,36-42)

  MeasZ(22-42)

  ErrorCorrectionPost(in=out=(1,2,3,4,5,6,7))
  ErrorCorrectionPost(in=out=(8,9,10,11,12,13,14))
  ErrorCorrectionPost(in=out=(15,16,17,18,19,20,21))
